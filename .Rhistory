body = body)
body <- dashboardBody(
# Update the CSS
tags$head(
tags$style(
HTML('
h3 {
font-weight: bold;
}
')
)
),
fluidRow(
box(
width = 12,
title = "Regular Box, Row 1",
"Star Wars, nothing but Star Wars"
)
),
fluidRow(
column(width = 6,
infoBox(
width = NULL,
title = "Regular Box, Row 2, Column 1",
subtitle = "Gimme those Star Wars"
)
),
column(width = 6,
infoBox(
width = NULL,
title = "Regular Box, Row 2, Column 2",
subtitle = "Don't let them end"
)
)
)
ui <- dashboardPage(
skin = "purple",
header = dashboardHeader(),
sidebar = dashboardSidebar(),
body = body)
shinyApp(ui, server)
body <- dashboardBody(
# Update the CSS
tags$head(
tags$style(
HTML('
h3 {
font-weight: bold;
}
')
)
),
fluidRow(
box(
width = 12,
title = "Regular Box, Row 1",
"Star Wars, nothing but Star Wars"
)
),
fluidRow(
column(width = 6,
infoBox(
width = NULL,
title = "Regular Box, Row 2, Column 1",
subtitle = "Gimme those Star Wars"
)
),
column(width = 6,
infoBox(
width = NULL,
title = "Regular Box, Row 2, Column 2",
subtitle = "Don't let them end"
)
)
)
body <- dashboardBody(
# Update the CSS
tags$head(
tags$style(
HTML('
h3 {
font-weight: bold;
}
')
)
),
fluidRow(
box(
width = 12,
title = "Regular Box, Row 1",
"Star Wars, nothing but Star Wars"
)
),
fluidRow(
column(width = 6,
infoBox(
width = NULL,
title = "Regular Box, Row 2, Column 1",
subtitle = "Gimme those Star Wars"
)
),
column(width = 6,
infoBox(
width = NULL,
title = "Regular Box, Row 2, Column 2",
subtitle = "Don't let them end"
)
)
)
body <- dashboardBody(
# Update the CSS
tags$head(
tags$style(
HTML('
h3 {
font-weight: bold;
}
')
)
),
fluidRow(
box(
width = 12,
title = "Regular Box, Row 1",
"Star Wars, nothing but Star Wars"
)
),
fluidRow(
column(width = 6,
infoBox(
width = NULL,
title = "Regular Box, Row 2, Column 1",
subtitle = "Gimme those Star Wars"
)
),
column(width = 6,
infoBox(
width = NULL,
title = "Regular Box, Row 2, Column 2",
subtitle = "Don't let them end"
)
)
)
ui <- dashboardPage(
skin = "purple",
header = dashboardHeader(),
sidebar = dashboardSidebar(),
body = body)
shinyApp(ui, server)
?validSStatuSes
?validStases
?validStatuses
??validStatuses
header <- dashboardHeader(
dropdownMenu(
type = "notifications",
notificationItem(
text = "The International Space Station is overhead!",
icon = icon("rocket")
)
)
)
#SECCION DE CARGA DE PAQUETES:
library(shinydashboard)
library(shiny)
library(dplyr)
header <- dashboardHeader(
dropdownMenu(
type = "notifications",
notificationItem(
text = "The International Space Station is overhead!",
icon = icon("rocket")
)
)
)
ui <- dashboardPage(header = header,
sidebar = dashboardSidebar(),
body = dashboardBody()
)
shinyApp(ui, server)
header <- dashboardHeader(
dropdownMenu(
type = "notifications",
notificationItem(
text = "The International Space Station is overhead!",
icon = icon("500px")
)
)
)
ui <- dashboardPage(header = header,
sidebar = dashboardSidebar(),
body = dashboardBody()
)
shinyApp(ui, server)
body <- dashboardBody(
tags$head(
tags$style(
HTML('
h3 {
font-weight: bold;
}
')
)
),
fluidRow(
box(
width = 12,
title = "Regular Box, Row 1",
"Star Wars, nothing but Star Wars",
# Make the box red
status = "danger"
)
),
fluidRow(
column(width = 6,
infoBox(
width = NULL,
title = "Regular Box, Row 2, Column 1",
subtitle = "Gimme those Star Wars",
# Add a star icon
icon = icon("star")
)
),
column(width = 6,
infoBox(
width = NULL,
title = "Regular Box, Row 2, Column 2",
subtitle = "Don't let them end",
# Make the box yellow
color = "yellow"
)
)
)
ui <- dashboardPage(
skin = "purple",
header = dashboardHeader(),
sidebar = dashboardSidebar(),
body = body)
shinyApp(ui, server)
body <- dashboardBody(
tags$head(
tags$style(
HTML('
h3 {
font-weight: bold;
}
')
)
),
fluidRow(
box(
width = 12,
title = "Regular Box, Row 1",
"Star Wars, nothing but Star Wars",
# Make the box red
status = "danger"
)
),
fluidRow(
column(width = 6,
infoBox(
width = NULL,
title = "Regular Box, Row 2, Column 1",
subtitle = "Gimme those Star Wars",
# Add a star icon
icon = icon("star")
)
),
column(width = 6,
infoBox(
width = NULL,
title = "Regular Box, Row 2, Column 2",
subtitle = "Don't let them end",
# Make the box yellow
color = "yellow"
)
)
)
ui <- dashboardPage(
skin = "purple",
header = dashboardHeader(),
sidebar = dashboardSidebar(),
body = body)
shinyApp(ui, server)
#4. CASE STUDY.
#Se define directorio de trabajo para cargar archivo .rda
getwd()
install.packages("flexdashboard")
library(flexdashboard)
library(flexdashboard)
---
title: "Bikeshare"
output:
flexdashboard::flex_dashboard:
orientation: columns
vertical_layout: fill
---
library(flexdashboard)
shiny::runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
tags$a ?
dashboardPage(
dashboardHeader(title="Exploring the 1973 US Arrests data with R & Shiny Dashboard",
titleWidth=650,
tags$li(class="dropdown", tags$a(href="https://www.linkedin.com/in/felipegarciaesp/", icon("linkedin"), "Mi Perfil", target="_blank"))),
dashboardSidebar(
# sidebarmenu
sidebarMenu(
id = "sidebar",
#first menuitem
menuItem("Dataset", tabName = "data", icon=icon("database")),
menuItem(text="Visualization", tabName="viz", icon=icon("chart-line")),
menuItem(text="Choropleth Map", tabName="map", icon=icon("map"))
)
),
dashboardBody(
tabItems(
# first tab item
tabItem(tabNName = "data",
# tab box
tabBox(id="t1", width=12,
tabPanel("About", icon=icon("address-card"), h4("tabpanel 1 placeholder"))
))
)
)
)
help(tags$a)
help("tags")
help("shinydashboard")
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
?USArrests
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
# load the required datasets
library(dplyr)
# create data object
my_data <- USArrests
# structure of the data
my_data %>%
str()
# Summary
my_data %>%
summary()
# first few observations
my_data %>%
head()
# Assigning row names to object
states = rownames(my_data)
# Assigning row names to object
states <- rownames(my_data)
states
my_data <- my_data %>%
mutate(State=states)
str(my_data)
?USArrests
USArrests
my_data
USArrests.states
USArrests["states"]
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
shiny::runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
my_data %>%
plot_ly() %>%
add_histogram(~Rape)
library(plotly)
my_data %>%
plot_ly() %>%
add_histogram(~Rape)
my_data %>%
plot_ly() %>%
add_boxplot(~Rape)
p1 = my_data %>%
plot_ly() %>%
add_histogram(~Rape)
# box plot
p2 = my_data %>%
plot_ly() %>%
add_boxplot(~Rape)
# stacking plots
subplot(p2, p1, nrows = 2)
p1 = my_data %>%
plot_ly() %>%
add_histogram(~Rape) %>%
layout(xaxis = list(title = "Rape"))
# box plot
p2 = my_data %>%
plot_ly() %>%
add_boxplot(~Rape) %>%
layout(yaxis = list(showticklabels = F))
# stacking plots
subplot(p2, p1, nrows = 2) hide_legend() %>%
layout(title = "Distribution chart - Histogram and Boxplot",
yaxis = list(title="Frequency"))
subplot(p2, p1, nrows = 2) %>%
hide_legend() %>%
layout(title = "Distribution chart - Histogram and Boxplot",
yaxis = list(title="Frequency"))
subplot(p2, p1, nrows = 2, shareX = TRUE) %>%
hide_legend() %>%
layout(title = "Distribution chart - Histogram and Boxplot",
yaxis = list(title="Frequency"))
str(my_data)
my_data %>%
select(-State) %>%
names()
# load the required datasets
library(dplyr)
library(plotly)
my_data %>%
select(-State) %>%
names()
shiny::runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
runApp('C:/Users/Usuario/portafolio/R/Project_Scripts/USArrestDashboard')
dir.create("neiss")
cwd
wd
runExample("01_hello")
library(shiny)
runExample("01_hello")
runExample("01_hello")
parametros <- matrix(0,2,1)
parametros
Ef_NS <- matrix(0,1,1)
Ef_NS
# Se borran todas las variables y figuras.
rm(list=ls())
graphics.off()
# Carga de paquetes:
library(openxlsx)
# Se fija el directorio de trabajo:
setwd("C:/Users/Usuario/Codigos_R/downscaling")
getwd()
# # Se identifica nombre de la carpeta a utilizar:
carpeta <- "archivos"
ruta_archivos <- paste0(getwd(),"/",carpeta)
# Se identifican los nombres de los archivos:
pr_mon_cmip6_ssp245 <- 'Pr_CMIP6_SSP245.xlsx'
pr_mon_cmip6_ssp585 <- 'Pr_CMIP6_SSP585.xlsx'
pr_mon_cr2met_hist <- 'Pr_CR2MET.xlsx'
tas_mon_cmip6_ssp245 <- 'Tas_CMIP6_SSP245.xlsx'
tas_mon_cmip6_ssp585 <- 'Tas_CMIP6_SSP585.xlsx'
tas_mon_cr2met_hist <- 'Tas_CR2MET.xlsx'
# Se identifican los nombres de los archivos:
pr_cmip6_ssp245 <- 'Pr_CMIP6_SSP245.xlsx'
pr_cmip6_ssp585 <- 'Pr_CMIP6_SSP585.xlsx'
pr_cr2met_hist <- 'Pr_CR2MET.xlsx'
tas_cmip6_ssp245 <- 'Tas_CMIP6_SSP245.xlsx'
tas_cmip6_ssp585 <- 'Tas_CMIP6_SSP585.xlsx'
tas_cr2met_hist <- 'Tas_CR2MET.xlsx'
# Este codigo va a arrojar una lista con la ruta completa, desde C:/User/Usuario ...
archivos <- list.files(ruta_archivos, pattern ="\\.xlsx$", full.names = TRUE)
archivos
seq_along(archivos)
for (i in seq_along(archivos)){}
for (i in seq_along(archivos)){print(i)}
# Se borran todas las variables y figuras.
rm(list=ls())
graphics.off()
# Carga de paquetes:
library(openxlsx)
library(readxl)
# Se fija el directorio de trabajo:
setwd("C:/Users/Usuario/Codigos_R/downscaling")
# Se identifica nombre de la carpeta a utilizar:
carpeta <- "archivos"
ruta_archivos <- paste0(getwd(),"/",carpeta)
# 1) Funcion para cargar informacion de distintos archivos a dataframes:
cargar_archivos <- function(archivos) {
# Lista para almacenar los dataframes:
dataframes <- list()
# Itera sobre cada archivo y cargalo en un dataframe
for (i in seq_along(archivos)) {
df_name <- paste0("df_", i) # Crea un nombre unico para cada dataframe
dataframes[[df_name]] <- read_excel(archivos[i]) # Carga el archivo en lista para almacenar dataframes.
}
return(dataframes)
}
# Este codigo va a arrojar una lista con la ruta completa, desde C:/User/Usuario ...
archivos <- list.files(ruta_archivos, pattern ="\\.xlsx$", full.names = TRUE)
dataframes <- cargar_archivos(archivos)
# Accede a los dataframes:
pp_ssp245 <- dataframes$df_1
pp_ssp585 <- dataframes$df_2
pp_obs <- dataframes$df_3
View(pp_ssp245)
View(pp_ssp585)
